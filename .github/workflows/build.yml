name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.platform }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # x86_64 builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux
            arch: x86_64
            extension: ""
            use_cross: false
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows
            arch: x86_64
            extension: ".exe"
            use_cross: false
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: macos
            arch: x86_64
            extension: ""
            use_cross: false
          # ARM builds
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            platform: linux
            arch: arm64
            extension: ""
            use_cross: true
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            platform: linux
            arch: armv7
            extension: ""
            use_cross: true

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        run: |
          rustup update stable
          rustup target add ${{ matrix.target }}
          rustup component add clippy

      - name: Install cross-compilation tools
        if: matrix.use_cross
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf libc6-dev-arm64-cross libc6-dev-armhf-cross
          # Install OpenSSL development packages for ARM architectures
          sudo apt-get install -y libssl-dev libssl-dev:arm64 libssl-dev:armhf
          # Ensure the pkg-config can find the correct libraries
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/lib/arm-linux-gnueabihf/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          cargo install cross

      - name: Extract version
        id: extract_version
        shell: bash
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build
        if: ${{ !matrix.use_cross }}
        run: cargo build --release --verbose

      - name: Build with cross
        if: matrix.use_cross
        run: cross build --release --verbose --target ${{ matrix.target }}

      - name: Run tests
        if: ${{ !matrix.use_cross }}
        run: cargo test --verbose

      - name: Prepare artifact
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mkdir -p artifacts
          cp target/release/zedex.exe artifacts/zedex-v${{ steps.extract_version.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.extension }}

      - name: Prepare artifact (non-cross builds)
        if: runner.os != 'Windows' && !matrix.use_cross
        shell: bash
        run: |
          mkdir -p artifacts
          cp target/release/zedex artifacts/zedex-v${{ steps.extract_version.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.extension }}
          chmod +x artifacts/zedex-v${{ steps.extract_version.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.extension }}

      - name: Prepare artifact (cross builds)
        if: matrix.use_cross
        shell: bash
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/zedex artifacts/zedex-v${{ steps.extract_version.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.extension }}
          chmod +x artifacts/zedex-v${{ steps.extract_version.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.extension }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zedex-v${{ steps.extract_version.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}
          path: artifacts/zedex-v${{ steps.extract_version.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.extension }}
          if-no-files-found: error 